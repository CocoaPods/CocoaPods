
File References:
- iOS App:
  - CPAppDelegate.h
  - CPAppDelegate.m
  - Supporting Files:
    - iOS App-Info.plist
    - InfoPlist.strings:
      - en
    - main.m
    - iOS App-Prefix.pch
    - Default.png
    - Default@2x.png
    - Default-568h@2x.png
- OS X App:
  - CPAppDelegate.h
  - CPAppDelegate.m
  - MainMenu.xib:
    - en
  - Supporting Files:
    - OS X App-Info.plist
    - InfoPlist.strings:
      - en
    - main.m
    - OS X App-Prefix.pch
    - Credits.rtf:
      - en
- Frameworks:
  - Cocoa.framework
  - SenTestingKit.framework
  - UIKit.framework
  - Foundation.framework
  - CoreGraphics.framework
  - Other Frameworks:
    - AppKit.framework
    - CoreData.framework
    - Foundation.framework
  - Pods_OS_X_App.framework
  - libPods-iOS App.a
- Products:
  - iOS App.app
  - OS X App.app
- Pods:
  - Pods-OS X App.debug.xcconfig
  - Pods-OS X App.release.xcconfig
  - Pods-iOS App.debug.xcconfig
  - Pods-iOS App.release.xcconfig



Targets:
- iOS App:
    Build Phases:
    - "[CP] Check Pods Manifest.lock":
        Input File List Paths: []
        Input Paths:
        - "${PODS_PODFILE_DIR_PATH}/Podfile.lock"
        - "${PODS_ROOT}/Manifest.lock"
        Output File List Paths: []
        Output Paths:
        - "$(DERIVED_FILE_DIR)/Pods-iOS App-checkManifestLockResult.txt"
        Shell Path: "/bin/sh"
        Shell Script: |
          diff "${PODS_PODFILE_DIR_PATH}/Podfile.lock" "${PODS_ROOT}/Manifest.lock" > /dev/null
          if [ $? != 0 ] ; then
              # print error to STDERR
              echo "error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation." >&2
              exit 1
          fi
          # This output is used by Xcode 'outputs' to avoid re-running this script phase.
          echo "SUCCESS" > "${SCRIPT_OUTPUT_FILE_0}"
    - Sources:
      - main.m
      - CPAppDelegate.m
    - Frameworks:
      - UIKit.framework
      - Foundation.framework
      - CoreGraphics.framework
      - libPods-iOS App.a
    - Resources:
      - InfoPlist.strings
      - Default.png
      - Default@2x.png
      - Default-568h@2x.png
    Build Configurations:
    - Debug:
        Build Settings:
          CODE_SIGN_IDENTITY[sdk=iphoneos*]: iPhone Developer
          FRAMEWORK_SEARCH_PATHS:
          - "$(inherited)"
          - '"$(SYSTEM_APPS_DIR)/Xcode.app/Contents/Developer/Library/Frameworks"'
          GCC_PRECOMPILE_PREFIX_HEADER: 'YES'
          GCC_PREFIX_HEADER: iOS App/iOS App-Prefix.pch
          INFOPLIST_FILE: iOS App/iOS App-Info.plist
          IPHONEOS_DEPLOYMENT_TARGET: '6.1'
          PRODUCT_NAME: "$(TARGET_NAME)"
          SDKROOT: iphoneos
          WRAPPER_EXTENSION: app
        Base Configuration: Pods-iOS App.debug.xcconfig
    - Release:
        Build Settings:
          CODE_SIGN_IDENTITY[sdk=iphoneos*]: iPhone Developer
          FRAMEWORK_SEARCH_PATHS:
          - "$(inherited)"
          - '"$(SYSTEM_APPS_DIR)/Xcode.app/Contents/Developer/Library/Frameworks"'
          GCC_PRECOMPILE_PREFIX_HEADER: 'YES'
          GCC_PREFIX_HEADER: iOS App/iOS App-Prefix.pch
          INFOPLIST_FILE: iOS App/iOS App-Info.plist
          IPHONEOS_DEPLOYMENT_TARGET: '6.1'
          OTHER_CFLAGS: "-DNS_BLOCK_ASSERTIONS=1"
          PRODUCT_NAME: "$(TARGET_NAME)"
          SDKROOT: iphoneos
          VALIDATE_PRODUCT: 'YES'
          WRAPPER_EXTENSION: app
        Base Configuration: Pods-iOS App.release.xcconfig
- OS X App:
    Build Phases:
    - "[CP] Check Pods Manifest.lock":
        Input File List Paths: []
        Input Paths:
        - "${PODS_PODFILE_DIR_PATH}/Podfile.lock"
        - "${PODS_ROOT}/Manifest.lock"
        Output File List Paths: []
        Output Paths:
        - "$(DERIVED_FILE_DIR)/Pods-OS X App-checkManifestLockResult.txt"
        Shell Path: "/bin/sh"
        Shell Script: |
          diff "${PODS_PODFILE_DIR_PATH}/Podfile.lock" "${PODS_ROOT}/Manifest.lock" > /dev/null
          if [ $? != 0 ] ; then
              # print error to STDERR
              echo "error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation." >&2
              exit 1
          fi
          # This output is used by Xcode 'outputs' to avoid re-running this script phase.
          echo "SUCCESS" > "${SCRIPT_OUTPUT_FILE_0}"
    - Sources:
      - main.m
      - CPAppDelegate.m
    - Frameworks:
      - Cocoa.framework
      - Pods_OS_X_App.framework
    - Resources:
      - InfoPlist.strings
      - Credits.rtf
      - MainMenu.xib
    - "[CP] Embed Pods Frameworks":
        Input File List Paths: []
        Input Paths:
        - "${PODS_ROOT}/Target Support Files/Pods-OS X App/Pods-OS X App-frameworks.sh"
        - "${BUILT_PRODUCTS_DIR}/PodTest-subspec_2/PodTest.framework"
        Output File List Paths: []
        Output Paths:
        - "${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}/PodTest.framework"
        Shell Path: "/bin/sh"
        Shell Script: '"${PODS_ROOT}/Target Support Files/Pods-OS X App/Pods-OS X
          App-frameworks.sh"

          '
    Build Configurations:
    - Debug:
        Build Settings:
          COMBINE_HIDPI_IMAGES: 'YES'
          GCC_PRECOMPILE_PREFIX_HEADER: 'YES'
          GCC_PREFIX_HEADER: OS X App/OS X App-Prefix.pch
          INFOPLIST_FILE: OS X App/OS X App-Info.plist
          PRODUCT_NAME: "$(TARGET_NAME)"
          WRAPPER_EXTENSION: app
        Base Configuration: Pods-OS X App.debug.xcconfig
    - Release:
        Build Settings:
          COMBINE_HIDPI_IMAGES: 'YES'
          GCC_PRECOMPILE_PREFIX_HEADER: 'YES'
          GCC_PREFIX_HEADER: OS X App/OS X App-Prefix.pch
          INFOPLIST_FILE: OS X App/OS X App-Info.plist
          PRODUCT_NAME: "$(TARGET_NAME)"
          WRAPPER_EXTENSION: app
        Base Configuration: Pods-OS X App.release.xcconfig



Build Configurations:
- Debug:
    Build Settings:
      ALWAYS_SEARCH_USER_PATHS: 'NO'
      ARCHS: "$(ARCHS_STANDARD_64_BIT)"
      CLANG_CXX_LANGUAGE_STANDARD: gnu++0x
      CLANG_CXX_LIBRARY: libc++
      CLANG_WARN_CONSTANT_CONVERSION: 'YES'
      CLANG_WARN_EMPTY_BODY: 'YES'
      CLANG_WARN_ENUM_CONVERSION: 'YES'
      CLANG_WARN_INT_CONVERSION: 'YES'
      CLANG_WARN__DUPLICATE_METHOD_MATCH: 'YES'
      COPY_PHASE_STRIP: 'NO'
      GCC_C_LANGUAGE_STANDARD: gnu99
      GCC_DYNAMIC_NO_PIC: 'NO'
      GCC_ENABLE_OBJC_EXCEPTIONS: 'YES'
      GCC_OPTIMIZATION_LEVEL: '0'
      GCC_PREPROCESSOR_DEFINITIONS:
      - DEBUG=1
      - "$(inherited)"
      GCC_SYMBOLS_PRIVATE_EXTERN: 'NO'
      GCC_WARN_64_TO_32_BIT_CONVERSION: 'YES'
      GCC_WARN_ABOUT_RETURN_TYPE: 'YES'
      GCC_WARN_UNINITIALIZED_AUTOS: 'YES'
      GCC_WARN_UNUSED_VARIABLE: 'YES'
      MACOSX_DEPLOYMENT_TARGET: '10.8'
      ONLY_ACTIVE_ARCH: 'YES'
      SDKROOT: macosx
- Release:
    Build Settings:
      ALWAYS_SEARCH_USER_PATHS: 'NO'
      ARCHS: "$(ARCHS_STANDARD_64_BIT)"
      CLANG_CXX_LANGUAGE_STANDARD: gnu++0x
      CLANG_CXX_LIBRARY: libc++
      CLANG_WARN_CONSTANT_CONVERSION: 'YES'
      CLANG_WARN_EMPTY_BODY: 'YES'
      CLANG_WARN_ENUM_CONVERSION: 'YES'
      CLANG_WARN_INT_CONVERSION: 'YES'
      CLANG_WARN__DUPLICATE_METHOD_MATCH: 'YES'
      COPY_PHASE_STRIP: 'YES'
      DEBUG_INFORMATION_FORMAT: dwarf-with-dsym
      GCC_C_LANGUAGE_STANDARD: gnu99
      GCC_ENABLE_OBJC_EXCEPTIONS: 'YES'
      GCC_WARN_64_TO_32_BIT_CONVERSION: 'YES'
      GCC_WARN_ABOUT_RETURN_TYPE: 'YES'
      GCC_WARN_UNINITIALIZED_AUTOS: 'YES'
      GCC_WARN_UNUSED_VARIABLE: 'YES'
      MACOSX_DEPLOYMENT_TARGET: '10.8'
      SDKROOT: macosx
